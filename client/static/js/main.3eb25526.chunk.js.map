{"version":3,"sources":["components/Title.tsx","functions/httprequests.ts","assets/heart.svg","assets/message.svg","functions/socket_connection.ts","components/Quote.tsx","components/NewQuote.tsx","components/List.tsx","components/CreateComments.tsx","components/CommentsPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Title","props","http","data","Promise","resolve","a","key","bearer","undefined","auth","headers","Headers","form","FormData","hasOwnProperty","append","payload","method","mode","credentials","body","queryString","stringify","url","fetch","result","parsed","json","status","ok","socket","io","Quote","useState","commentsActive","setCommentsActive","quoteDocument","likes","find","current","fingerprint","setIsLiked","fingerprintIndex","findIndex","currentLike","shouldLike","emit","id","_id","like","locallyChangeQuote","confirm","deleteQuoteLocally","className","onClick","src","heart","alt","length","message","comments","quote","author","moment","createdAt","format","to","NewQuote","quoteTitle","setquoteTitle","authorTitle","setauthorTitle","alert","response","updateLocally","Date","placeholder","value","onChange","event","target","List","quotes","setQuotes","likeLocally","index","currentQuote","toString","push","splice","JSON","parse","createCommentLocally","comment","match","Math","random","toDate","updatedAt","console","log","matchIndex","newQuotes","useEffect","on","likeFingerprintIndex","quoteIndex","getQuotes","map","CreateComments","setAuthor","setComment","CommentsPage","setquoteDocument","params","then","App","setFingerprint","FingerprintJS","load","fp","get","visitorId","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3eb25526.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Title(props: PropsForComponent) {\r\n    return (\r\n        <div>\r\n            <h1>{props.Title}</h1>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\ninterface PropsForComponent {\r\n    Title: string\r\n}","/**\r\n * Perform a http request \r\n * to a remote API \r\n */\r\n\r\n/*\r\nexample request\r\nhttp({\r\n    url: http://example.com\r\n    method: \"POST\",\r\n    headers: { \"\" }\r\n})\r\n*/\r\n\r\nimport queryString from \"querystring\"\r\n\r\ninterface HttpReturnType {\r\n    status: number,\r\n    url: string,\r\n    ok: string,\r\n    [key: string]: any\r\n}\r\n\r\nexport default function http(data: any): Promise<HttpReturnType> {\r\n\treturn new Promise(async resolve => {\r\n\t\tlet bearer = undefined\r\n\t\tif (data.auth !== undefined)\r\n\t\t\tbearer = { \"Authorization\": \"Bearer \" + data.auth }\r\n\r\n\t\tconst headers = new Headers({\r\n\t\t\t\"Content-Type\": \"application/x-www-form-urlencoded\",\r\n\t\t\t...bearer,\r\n\t\t\t...data.headers\r\n\t\t})\r\n\t\tconst form = new FormData()\r\n\r\n\t\tfor (const key in data.data) {\r\n\t\t\tif (data.data.hasOwnProperty(key)) {\r\n\t\t\t\tform.append(key, data.data[key])\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst payload: RequestInit = {\r\n\t\t\tmethod: data.method,\r\n\t\t\theaders: headers,\r\n\t\t\tmode: \"cors\",\r\n\t\t\tcredentials: \"same-origin\"\r\n\t\t}\r\n\t\tif (data.method !== \"GET\")\r\n\t\t\tpayload.body = queryString.stringify(data.data)\r\n\t\telse {\r\n\t\t\tdata.url += \"?\" + queryString.stringify(data.data)\r\n\t\t\tdelete payload.body\r\n\t\t}\r\n\r\n\t\tconst result = await fetch(data.url, payload)\r\n\r\n\t\tlet parsed = undefined\r\n\t\ttry {\r\n\t\t\tparsed = await result.json()\r\n\t\t} catch (error) {\r\n\t\t\tparsed = result\r\n\t\t}\r\n\r\n\t\tresolve({ status: result.status, url: result.url, ok: result.ok, ...parsed})\r\n\t})\r\n}","export default __webpack_public_path__ + \"static/media/heart.c759f248.svg\";","export default __webpack_public_path__ + \"static/media/message.06932878.svg\";","import io from \"socket.io-client\"\r\n\r\nconst socket = io();\r\n\r\nexport default socket","import moment from 'moment'\r\nimport React from 'react'\r\nimport { useState } from 'react'\r\nimport { Link, Redirect } from 'react-router-dom'\r\nimport heart from \"../assets/heart.svg\"\r\nimport message from \"../assets/message.svg\"\r\nimport http from '../functions/httprequests'\r\nimport socket from '../functions/socket_connection'\r\nimport CreateComments from './CreateComments'\r\n\r\nimport \"./Quote.css\"\r\n\r\nexport default function Quote(props: PropsForComponent) {\r\n\r\n    const [commentsActive, setCommentsActive] = useState(false)\r\n    const [isLiked, setIsLiked] = useState(props.quoteDocument.likes.find((current) => current === props.fingerprint) != null)\r\n\r\n    async function like() {\r\n\r\n        // Kolla om vi har likeat eller inte\r\n        const fingerprintIndex = props.quoteDocument.likes.findIndex((currentLike) => currentLike === props.fingerprint)\r\n\r\n        let shouldLike: boolean\r\n\r\n        // Om den inte redan finns så vill vi likea\r\n        if (fingerprintIndex < 0) {\r\n            shouldLike = true\r\n            // Om den redan finns då vill vi ta bort like\r\n        } else {\r\n            shouldLike = false\r\n        }\r\n\r\n        setIsLiked(shouldLike)\r\n\r\n        socket.emit(\"like\", {\r\n            id: props.quoteDocument._id,\r\n            like: shouldLike,\r\n            fingerprint: props.fingerprint\r\n        })\r\n\r\n        await http({\r\n            url: \"/quote/like\",\r\n            method: \"PATCH\",\r\n            data: {\r\n                fingerprint: props.fingerprint,\r\n                like: shouldLike,\r\n                id: props.quoteDocument._id\r\n            }\r\n        })\r\n        props.locallyChangeQuote(props.quoteDocument._id)\r\n    }\r\n\r\n    function comment() {\r\n        setCommentsActive(!commentsActive)\r\n    }\r\n\r\n    async function deleteQuote() {\r\n        // eslint-disable-next-line no-restricted-globals\r\n        let confirmed = confirm(\"Vill du verkligen ta bort denna quote\")\r\n\r\n        if (confirmed) {\r\n            await http({\r\n                url: \"/quote\",\r\n                method: \"DELETE\",\r\n                data: {\r\n                    id: props.quoteDocument._id\r\n                }\r\n            })\r\n            props.deleteQuoteLocally(props.quoteDocument._id)\r\n            socket.emit(\"deleteQuote\", props.quoteDocument._id);\r\n        }\r\n\r\n        else {\r\n            return;\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"all\">\r\n            <div className=\"interact_container\">\r\n                <div className=\"likes_container\">\r\n                    <img onClick={like} className=\"heart_icon\" src={isLiked ? heart : heart} alt=\"\" />\r\n                    <p>{props.quoteDocument.likes.length}</p>\r\n                </div>\r\n                <div className=\"comment-container\">\r\n                    <img onClick={comment} className=\"comment_icon\" src={message} alt=\"\" />\r\n                    <p>{props.quoteDocument.comments.length}</p>\r\n                </div>\r\n            </div>\r\n            <p className=\"quote\">\"{props.quoteDocument.quote}\"</p>\r\n            <p className=\"author\">{props.quoteDocument.author}</p>\r\n            <p className=\"createdAt\">{moment(props.quoteDocument.createdAt).format(\"YY/MM/DD HH:mm\")}</p>\r\n            <button className=\"deleteButton\" onClick={deleteQuote}>Delete</button>\r\n            {commentsActive ?\r\n                <Redirect to={\"/comments/\" + props.quoteDocument._id} />\r\n                : null\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n// eslint-disable-next-line no-lone-blocks\r\n{/* <div className=\"comments\">\r\n    \r\n    <CreateComments id={props.quoteDocument._id} createCommentLocally={props.createCommentLocally} />\r\n</div> */}\r\n\r\ninterface PropsForComponent {\r\n    createCommentLocally: (id: string, author: string, comment: string) => void\r\n    locallyChangeQuote: (id: string) => void,\r\n    quoteDocument: IQuote,\r\n    fingerprint: string,\r\n    deleteQuoteLocally: (id: string) => void\r\n}\r\n\r\n/**\r\n_id string\r\nauthor string\r\nquote string\r\nlikes []\r\ncomments []\r\nupdatedAt Date\r\ncreatedAt Date\r\n */ ","import React, { useState } from 'react'\r\nimport http from '../functions/httprequests'\r\nimport socket from '../functions/socket_connection'\r\n\r\nexport default function NewQuote(props: PropsForComponent) {\r\n   const [quoteTitle, setquoteTitle] = useState(\"\")\r\n   const [authorTitle, setauthorTitle] = useState(\"\")\r\n    \r\n    async function createQuote() {\r\n        let quote = quoteTitle\r\n        let author = authorTitle\r\n\r\n        if (quoteTitle.length <= 0 || authorTitle.length <= 0) {\r\n           alert(\"Du måste fylla i author och quote\")\r\n           return\r\n        }\r\n\r\n        \r\n        const response = await http({\r\n            url: \"/quote\",\r\n            method: \"POST\",\r\n            data: {\r\n                author: author,\r\n                quote: quote\r\n            }\r\n        })\r\n        \r\n        socket.emit(\"createQuote\", {\r\n            id: response.quote.id,\r\n            author: authorTitle,\r\n            quote: quoteTitle\r\n        })\r\n\r\n        props.updateLocally(\r\n            response.quote.id,\r\n            new Date(),\r\n            new Date(),\r\n            author,\r\n            quote\r\n        );\r\n\r\n        setauthorTitle(\"\");\r\n        setquoteTitle(\"\");\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <input placeholder=\"quote\" value={quoteTitle} onChange={(event) => setquoteTitle(event.target.value)}/>\r\n            <input placeholder=\"author\" value={authorTitle} onChange={(event) => setauthorTitle(event.target.value)}/>\r\n            <button className=\"button\" onClick={createQuote}>Create</button>\r\n        </div>\r\n    )\r\n}\r\n\r\ninterface PropsForComponent {\r\n    updateLocally: (id: string, createdAt: Date, updatedAt: Date, author: string, quote: string) => void\r\n}","import { useEffect, useState } from 'react'\r\nimport moment from \"moment\"\r\nimport http from '../functions/httprequests';\r\nimport Quote from './Quote'\r\nimport NewQuote from \"./NewQuote\"\r\nimport './List.css';\r\nimport socket from '../functions/socket_connection';\r\nimport { idText } from 'typescript';\r\nimport { stringify } from 'querystring';\r\n\r\nexport default function List(props: DettaBehöverInteHeta_PropsForComponent) {\r\n\r\n    //const documents: Array<IQuote> = []\r\n    const [quotes, setQuotes] = useState<IQuote[]>([])\r\n\r\n    function likeLocally(id: string) {\r\n        //quotes[quote]\r\n        const index = quotes.findIndex((currentQuote) => currentQuote._id.toString() === id.toString())\r\n        const fingerprintIndex = quotes[index].likes.findIndex((currentLike) => currentLike === props.fingerprint)\r\n\r\n        // Om fingerpinr är mindre än 0 så lägger vi till fingerpirnten\r\n        if (fingerprintIndex < 0) {\r\n            quotes[index].likes.push(props.fingerprint)\r\n        } else {\r\n            quotes[index].likes.splice(fingerprintIndex, 1)\r\n        }\r\n\r\n        // Vi kopierar och uppdaterar\r\n        setQuotes(JSON.parse(JSON.stringify(quotes)))        \r\n    }\r\n\r\n    function createCommentLocally(id: string, author: string, comment: string) {\r\n        // Hitta rätt quotedocument\r\n        const match = quotes.find((currentQuote) => currentQuote._id === id)\r\n        if (!match) {\r\n            console.log(\"Vi kunde inte hitta commenten\")\r\n            return\r\n        }\r\n\r\n        match.comments.push({\r\n            _id: (Math.random() * 100000).toString(),\r\n            author: author,\r\n            comment: comment,\r\n            createdAt: moment().toDate(),\r\n            updatedAt: moment().toDate()\r\n        })\r\n\r\n        setQuotes(JSON.parse(JSON.stringify(quotes)))     \r\n    }\r\n\r\n    function deleteQuoteLocally(id: string) {\r\n        // Hitta rätt quotedocument\r\n        const matchIndex = quotes.findIndex((currentQuote) => currentQuote._id === id)\r\n        if (matchIndex < 0) {\r\n            console.log(\"Vi kunde inte hitta quoten\")\r\n            return\r\n        }\r\n\r\n        else {\r\n            quotes.splice(matchIndex, 1)\r\n            const newQuotes = JSON.parse(JSON.stringify(quotes))\r\n            setQuotes(newQuotes);\r\n        }\r\n    }\r\n\r\n    function createQuoteLocally(id: string, createdAt: Date, updatedAt: Date, author: string, quote: string) {\r\n        quotes.push({\r\n            _id: id,\r\n            author: author,\r\n            quote: quote,\r\n            comments: [],\r\n            likes: [],\r\n            createdAt: createdAt,\r\n            updatedAt: updatedAt\r\n        })\r\n\r\n        setQuotes(JSON.parse(JSON.stringify(quotes)))   \r\n    }\r\n\r\n    useEffect(() => {\r\n        \r\n        socket.on(\"like\", (data: {\r\n            id: string,\r\n            like: boolean,\r\n            fingerprint: string\r\n        }) => {\r\n\r\n            // Hitta rätt quote\r\n            const quote = quotes.find(current => current._id.toString() === data.id)\r\n            if (quote === undefined) {\r\n                return;\r\n            }\r\n\r\n            const likeFingerprintIndex = quote.likes.findIndex(fingerprint => fingerprint === data.fingerprint)\r\n            if (likeFingerprintIndex === -1) {\r\n                //skapa like\r\n                quote.likes.push(data.fingerprint)\r\n            } \r\n            else {\r\n                quote.likes.splice(likeFingerprintIndex)\r\n            }\r\n\r\n            setQuotes(JSON.parse(JSON.stringify(quotes)));\r\n\r\n            //ta bort like\r\n        })\r\n\r\n        socket.on(\"createQuote\", (data: {\r\n            id: string,\r\n            quote: string,\r\n            author: string\r\n        }) => {\r\n\r\n            quotes.push({\r\n                _id: data.id,\r\n                author: data.author,\r\n                comments: [],\r\n                createdAt: new Date(),\r\n                likes: [],\r\n                quote: data.quote,\r\n                updatedAt: new Date()\r\n            })\r\n\r\n            console.log(\"tjenixen \", data.quote     )\r\n            setQuotes(JSON.parse(JSON.stringify(quotes)));\r\n        })\r\n\r\n        socket.on(\"createcomment\", (data: {\r\n            id: string,\r\n            comment: string,\r\n            author: string\r\n        }) => {\r\n            // Hitta rätt quote\r\n            const quote = quotes.find(current => current._id === data.id)\r\n            // OM quote inte finns  hallå?????? du försvann\r\n\r\n            if (quote === undefined) {\r\n                return\r\n            }\r\n\r\n            // Pusha comment i quoten\r\n            quote.comments.push({\r\n                _id: Math.random().toString(),\r\n                author: data.author,\r\n                comment: data.comment,\r\n                createdAt: new Date(),\r\n                updatedAt: new Date()\r\n            })\r\n\r\n            setQuotes(JSON.parse(JSON.stringify(quotes)));\r\n        })\r\n\r\n        socket.on(\"deleteQuote\", (id: string) => {\r\n            const quoteIndex = quotes.findIndex(current => current._id.toString() === id)\r\n            if (quoteIndex === -1) {\r\n                return;\r\n            }\r\n\r\n            quotes.splice(quoteIndex)\r\n\r\n            setQuotes(JSON.parse(JSON.stringify(quotes)));\r\n        })\r\n\r\n        return () => {\r\n            \r\n        }\r\n    }, [quotes])\r\n\r\n    useEffect(() => {\r\n        async function getQuotes() {\r\n            const result = await http({\r\n                url: \"/quote\",\r\n                method: \"GET\",\r\n            })\r\n\r\n            setQuotes(result.quotes)\r\n            console.log(result)\r\n        }\r\n\r\n        getQuotes();\r\n\r\n    }, [])\r\n\r\n    // Hämta data från backend\r\n    // Displaya varje quote\r\n\r\n    return (\r\n        <div>\r\n\r\n\r\n            <NewQuote updateLocally={createQuoteLocally} />\r\n            <div className=\"list-container\">\r\n                {\r\n                    quotes.map((currentQuote) => <Quote \r\n                        key={currentQuote._id}\r\n                        createCommentLocally={createCommentLocally}\r\n                        locallyChangeQuote={likeLocally}\r\n                        deleteQuoteLocally={deleteQuoteLocally}\r\n                        fingerprint={props.fingerprint}\r\n                        quoteDocument={{\r\n                            _id: currentQuote._id,\r\n                            author: currentQuote.author,\r\n                            quote: currentQuote.quote,\r\n                            comments: currentQuote.comments,\r\n                            likes: currentQuote.likes,\r\n                            createdAt: moment(currentQuote.createdAt).toDate(),\r\n                            updatedAt: moment(currentQuote.updatedAt).toDate()\r\n                        }}\r\n                    />)\r\n                }\r\n            </div>\r\n           {/*  {<Quote \r\n                quoteDocument={{\r\n                    _id: \"\",\r\n                    author: \"Göran svensson\",\r\n                    quote: \"Grönt är bara nice på sommaren, typ\",\r\n                    comments: [],\r\n                    likes: [],\r\n                    createdAt: new Date(),\r\n                    updatedAt: new Date()\r\n                }}\r\n            />} */}\r\n        </div>\r\n    )\r\n}\r\n\r\ninterface DettaBehöverInteHeta_PropsForComponent {\r\n    fingerprint: string\r\n}","import React, { useState } from 'react'\r\nimport http from '../functions/httprequests';\r\nimport socket from '../functions/socket_connection';\r\n\r\nexport default function CreateComments(props: PropsForComponent) {\r\n\r\n    // author \r\n    // comment\r\n\r\n    const [author, setAuthor] = useState(\"\");\r\n    const [comment, setComment] = useState(\"\");\r\n\r\n    async function publishComment() {\r\n\r\n        if (author.length === 0 || comment.length === 0) {\r\n            return;\r\n        }\r\n\r\n        const response = await http({\r\n            url: \"/quote/comment\",\r\n            method: \"POST\",\r\n            data: {\r\n                author: author,\r\n                comment: comment,\r\n                id: props.id\r\n            }\r\n        })\r\n\r\n        socket.emit(\"createcomment\", {\r\n            id: props.id,\r\n            comment: comment,\r\n            author: author\r\n        })\r\n\r\n        props.createCommentLocally(props.id, author, comment)\r\n\r\n        setComment(\"\");\r\n        setAuthor(\"\");\r\n\r\n        console.log(response)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <input placeholder=\"Comment\" value={comment} onChange={(event) => setComment(event.target.value)} />\r\n            <input placeholder=\"Author\" value={author} onChange={(event) => setAuthor(event.target.value)} />\r\n            <button onClick={publishComment}>Submit</button>\r\n        </div>\r\n    )\r\n}\r\n\r\ninterface PropsForComponent {\r\n    id: string\r\n    createCommentLocally: (id: string, author: string, comment: string) => void\r\n}","import { Interface } from 'node:readline'\r\nimport React, { Props, useEffect, useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport http from '../functions/httprequests'\r\nimport socket from '../functions/socket_connection';\r\nimport './CommentsPage.css';\r\nimport CreateComments from \"./CreateComments\"\r\n\r\nexport default function CommentsPage(props: PropsForComponent) {\r\n\r\n    const [quoteDocument, setquoteDocument] = useState<IQuote | undefined>(undefined)\r\n\r\n    useEffect(() => {\r\n\r\n        http({\r\n            url: \"/quote\",\r\n            method: \"GET\",\r\n            data: {\r\n                id: props.match.params.id\r\n            }\r\n        }).then((response) => {\r\n            setquoteDocument(response as unknown as IQuote);\r\n        })\r\n    }, [props.match.params.id])\r\n\r\n    useEffect(() => {\r\n        socket.on(\"createcomment\", (data: {\r\n            id: string,\r\n            comment: string,\r\n            author: string\r\n        }) => {\r\n            if (quoteDocument === undefined)\r\n                return\r\n\r\n            // Pusha comment i quoten\r\n            quoteDocument.comments.push({\r\n                _id: Math.random().toString(),\r\n                author: data.author,\r\n                comment: data.comment,\r\n                createdAt: new Date(),\r\n                updatedAt: new Date()\r\n            })\r\n\r\n            setquoteDocument(JSON.parse(JSON.stringify(quoteDocument)));\r\n        })\r\n        \r\n    })\r\n\r\n    function updateLocally(id: string, author: string, comment: string) {\r\n        console.log(id, author, comment)\r\n        quoteDocument?.comments.push({\r\n            comment: comment,\r\n            _id: id,\r\n            author: author,\r\n            createdAt: new Date(),\r\n            updatedAt: new Date()\r\n        })\r\n\r\n        setquoteDocument(JSON.parse(JSON.stringify(quoteDocument)))\r\n    }\r\n\r\n    if (quoteDocument === undefined) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            { /* DESIGNA ALLA COMMENTS BRA */}\r\n            <Link className=\"home-btn\" to=\"/\">Home</Link>\r\n            <div className=\"all-the-sutff-for-create-comments-yes\">\r\n                <CreateComments id={props.match.params.id} createCommentLocally={updateLocally} />\r\n            </div>\r\n            {\r\n                quoteDocument.comments.map((comment) =>\r\n                    <div key={comment._id} className=\"commentContainer\">\r\n                        <p className=\"commentText\"> \"{comment.comment}\"</p>\r\n                        <p className=\"commentAText\"> {comment.author}</p>\r\n                    </div>\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\ninterface PropsForComponent {\r\n    match: {\r\n        params: {\r\n            id: string\r\n        }\r\n    }\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport Title from \"./components/Title\";\r\nimport List from \"./components/List\";\r\nimport FingerprintJS from '@fingerprintjs/fingerprintjs';\r\nimport { io } from \"socket.io-client\";\r\nimport {\r\n\tBrowserRouter as Router,\r\n\tSwitch,\r\n\tRoute,\r\n\tLink\r\n  } from \"react-router-dom\";\r\nimport CommentsPage from \"./components/CommentsPage\";\r\nimport socket from \"./functions/socket_connection\";\r\nfunction App() {\r\n\r\n\tconst [fingerprint, setFingerprint] = useState(\"\")\r\n\r\n\tuseEffect(() => {\r\n\r\n\t\tsocket.emit(\"ping\", \"\");\r\n\r\n\t\t(async () => {\r\n\t\t\t// We recommend to call `load` at application startup.\r\n\t\t\tconst fp = await FingerprintJS.load();\r\n\t\t  \r\n\t\t\t// The FingerprintJS agent is ready.\r\n\t\t\t// Get a visitor identifier when you'd like to.\r\n\t\t\tconst result = await fp.get();\r\n\t\t  \r\n\t\t\t// This is the visitor identifier:\r\n\t\t\tsetFingerprint(result.visitorId);\r\n\t\t  })();\r\n\t\t\r\n\t\treturn () => {\r\n\t\t\t\r\n\t\t}\r\n\t}, [])\r\n  \treturn (\r\n\r\n\t\t<Router>\r\n\t\t\t<Switch>\r\n\t\t\t\t<Route path=\"/comments/:id\" component={CommentsPage} />\r\n\t\t\t\t\r\n\t\t\t\t<Route path=\"/\">\r\n\t\t\t\t\t<div className=\"App\">\r\n\t\t\t\t\t\t<Title Title={\"Quote of the day\"} />\r\n\t\t\t\t\t\t<List fingerprint={fingerprint}/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Route>\r\n\t\t\t</Switch>\r\n\t\t</Router>\r\n  \t);\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t\t<App />\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}